package my.cipherwaleed;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

/*Ceaser's Cipher
  Purpose:
  Author: Waleed Aamer
  Date Created: Oct 14, 2021 (8:13PM)
  Date Finished: Oct 28, 2021 (9:20PM)
*/

public class CipherWaleedUI extends javax.swing.JFrame {

    /**
     * Creates new form CipherWaleedUI
     */
    public CipherWaleedUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        Title = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CipherOutput = new javax.swing.JTextArea();
        CipherSave = new javax.swing.JButton();
        Shift = new javax.swing.JLabel();
        Exit = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        Decipher = new javax.swing.JButton();
        Cipher = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        FileLocation = new javax.swing.JTextField();
        Open0 = new javax.swing.JButton();
        ShiftInput = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Input = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        DecipherOutput = new javax.swing.JTextArea();
        DecipherSave = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Open = new javax.swing.JTextArea();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Title.setFont(new java.awt.Font("Tw Cen MT", 1, 30)); // NOI18N
        Title.setText("Ceaser's Data Cipher/Decipher ");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ciphered Text", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        CipherOutput.setColumns(20);
        CipherOutput.setLineWrap(true);
        CipherOutput.setRows(5);
        jScrollPane1.setViewportView(CipherOutput);

        CipherSave.setText("Save");
        CipherSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CipherSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(CipherSave)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(CipherSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                .addContainerGap())
        );

        Shift.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Shift.setText("Set Shift Amount:");

        Exit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        Clear.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        Decipher.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Decipher.setText("Decipher");
        Decipher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecipherActionPerformed(evt);
            }
        });

        Cipher.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Cipher.setText("Cipher");
        Cipher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CipherActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input txt File Location", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        FileLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileLocationActionPerformed(evt);
            }
        });

        Open0.setText("Open");
        Open0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Open0ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FileLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addComponent(Open0)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FileLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Open0)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input Text ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        Input.setColumns(20);
        Input.setLineWrap(true);
        Input.setRows(5);
        jScrollPane3.setViewportView(Input);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Deciphered Text", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        DecipherOutput.setColumns(20);
        DecipherOutput.setLineWrap(true);
        DecipherOutput.setRows(5);
        jScrollPane2.setViewportView(DecipherOutput);

        DecipherSave.setText("Save");
        DecipherSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecipherSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(DecipherSave)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DecipherSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Opened txt File"));

        Open.setColumns(20);
        Open.setRows(5);
        jScrollPane4.setViewportView(Open);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Title)
                                .addGap(56, 56, 56))))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(Shift)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ShiftInput, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Cipher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Decipher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Exit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Title)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Decipher, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Cipher, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ShiftInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Shift))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
  
    
    
    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed
    
    public String File10(String File2) throws IOException {
    
    // File10 Purpose: Used to get a txt file's content from file location
        
        File Work = new File(File2); // Finds the txt file from file location
          Scanner Scan1 = new Scanner(Work); // Starts scanner for inputting txt file
          String data = "";
          while (Scan1.hasNextLine()) {  // When there is a next line in txt file...
          data = data.concat(Scan1.nextLine() + "\n"); // ... it adds a line to scanned input
       Open.setText(data);}
       Scan1.close();
    return data;
     
    }
    
    private String Cipher(String File1, int Shift1) throws IOException {

    // Cipher Purpose: Used to get a file's cipher using given Shift and file path
        
            String data = null;
            if(File1 != " "){data = File10(File1);}
        
            String Output2 = "";
            int N = data.length();
            data = data.toLowerCase();
            char fMath1[] = data.toCharArray(); 
            char fMath2;
            for(int I = 0; I < N; I++) // Run While These Conditions are True
            {if(Character.isLetter(fMath1[I])) // Runs when it Confirms Specific Single Value is a Letter
            {fMath2 = (char)(((int) fMath1[I] + Shift1 - 97) % 26 + 97); // Using Math to Shift
            Output2 = Output2 + fMath2;}
            else if(fMath1[I] == ' ') 
            {Output2 = Output2 + fMath1[I]; 
            }else if (!String.valueOf(fMath1[I]).matches(".")){ 
            Output2 = Output2 + fMath1[I];}
            }CipherOutput.setText(Output2);
        return Output2;
    }
    
    private String Decipher(String File1, int Shift1) throws IOException {
    
    // Decipher Purpose: Used to get a file's decipher using given Shift and file path
           
            String data = null;
            if(File1 != " "){data = File10(File1);}
    
            String Output2 = "";
            int N = data.length();
            data = data.toLowerCase();
            char fMath1[] = data.toCharArray();
            char fMath2;
            for(int I = 0; I < N; I++) 
            {if(Character.isLetter(fMath1[I])) 
            {if (((int) fMath1[I] - Shift1) < 97) 
            {fMath2 = (char)(((int) fMath1[I] - Shift1 - 97 + 26) % 26 + 97); //Runs when Ascii Value of Letter - Shift is not greater then 97
            }else // Otherwise...
            {fMath2 = (char)(((int) fMath1[I] - Shift1 - 97) % 26 + 97); // Original Cipher Code except - Shift now
            }Output2 = Output2 + fMath2;
            }else if (fMath1[I] == ' ')
            {Output2 = Output2 + fMath1[I];
            }else if (!String.valueOf(fMath1[I]).matches(".")){
            Output2 = Output2 + fMath1[I];}
            }DecipherOutput.setText(Output2);
        return Output2;
    
    }
    
    /**
     *
     * @param File
     * @param Old
     * @param New
     * @throws IOException
     */
    public static void modifySave(String File, String Old, String New) throws IOException {
     
    // modifySave Purpose: Used to replace orignal file content with new content
        
    File FileLoc = new File(File);
        
      String FileCon = Old;
      
      FileCon = FileCon.replaceAll(Old, New); // Replacing Old txt with New txt
      FileWriter writer = new FileWriter(File); // Creates a FileWriter to write replaced txt into file
      writer.append(FileCon); // Writes replaced txt
      writer.flush();}
             
    
    
    private void CipherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CipherActionPerformed

    // CipherActionPerformed Purpose: To cipher text when given Shift and Input0 text\FileLocation
        
            // Inputting Values
        int Shift1 = Integer.parseInt(ShiftInput.getText()); 
        String Input0 = Input.getText();
        
        String File = FileLocation.getText();
        
        
            // Assigning Values/Variables
       int N, I;
       String Output1 = ""; 
       
       N = Input0.length(); // Gets Input Length and Assigns to N
       Input0 = Input0.toLowerCase(); 
       char Math1[] = Input0.toCharArray(); // Gets  a CharArray from Input
       char Math2;
           
           // Shifting Letter Calculation Loop   
       for(I = 0; I < N; I++) // Run While These Conditions are True
       {if(Character.isLetter(Math1[I])) // Runs when it Confirms Specific Single Value is a Letter
       {Math2 = (char)(((int) Math1[I] + Shift1 - 97) % 26 + 97); // Using Math to Shift
       Output1 = Output1 + Math2;}
       else if(Math1[I] == ' ') // Takes Initial Letter Out
       {Output1 = Output1 + Math1[I];
       }else if (!String.valueOf(Math1[I]).matches(".")){
       Output1 = Output1 + Math1[I];}
       }CipherOutput.setText(Output1);
        
        // Ciphers given txt file if given a txt file
          if(File != " "); // If File has anything in it other then blank...
       try{
        Cipher(File, Shift1); //...try Cipher usinf File and Shift1
       }catch(Exception e) { // If Exception erroe catched...
       throw new RuntimeException(e); //... Throw the Exception error
       }
        
    }//GEN-LAST:event_CipherActionPerformed

    private void DecipherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecipherActionPerformed

    // DecipherActionPerformed Purpose: To decipher text when given Shift and Input0 text\FileLocation
        
        // Inputing Values
        int Shift1 = Integer.parseInt(ShiftInput.getText()); 
        String Input0 = Input.getText();
        
        String File = FileLocation.getText();
        
       // Assigning Values/Variables
       int N, I;
       String Output1 = " "; 
       N = Input0.length(); 
       Input0 = Input0.toLowerCase(); 
       char Math1[] = Input0.toCharArray(); 
       char Math2;
        
       // Shifting Input0 Letter Calculation Loop
       for(I = 0; I < N; I++) 
       {if(Character.isLetter(Math1[I])) 
       {if (((int) Math1[I] - Shift1) < 97) 
       {Math2 = (char)(((int) Math1[I] - Shift1 - 97 + 26) % 26 + 97); //Runs when Ascii Value of Letter - Shift is not greater then 97
       }else // Otherwise...
       {Math2 = (char)(((int) Math1[I] - Shift1 - 97) % 26 + 97); // Original Cipher Code except - Shift now
       }Output1 = Output1 + Math2;
       }else if (Math1[I] == ' ')
       {Output1 = Output1 + Math1[I];
       }else if (!String.valueOf(Math1[I]).matches(".")){
       Output1 = Output1 + Math1[I];}
       }DecipherOutput.setText(Output1);
       
       // Deciphers given txt file if given a txt file
       if(File != " "); // If File has anything in it other then blank...
        try{
          Decipher(File, Shift1); //...try Cipher usinf File and Shift1
        }catch(Exception e) { // If Exception erroe catched...
          throw new RuntimeException(e); //... Throw the Exception error
                            }
    }//GEN-LAST:event_DecipherActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
            
    // ClearActionPerformed Purpose: To Clear all test on GUI
        
        CipherOutput.setText("");
        DecipherOutput.setText("");
        Input.setText("");
        ShiftInput.setText("");
        FileLocation.setText("");
        Open.setText("");
    }//GEN-LAST:event_ClearActionPerformed

    private void FileLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileLocationActionPerformed
    }//GEN-LAST:event_FileLocationActionPerformed

    private void Open0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Open0ActionPerformed
      
    // Open0ActionPerformed Purpose: To open and display file contents in Open  
        
        String File = FileLocation.getText();
        File Work = new File(File); 
        Scanner Scan1 = null;
           try{Scan1 = new Scanner(Work);}catch(Exception e) { 
              throw new RuntimeException(e);}
      String data = "";
      while (Scan1.hasNextLine()) {
        data = data.concat(Scan1.nextLine() + "\n");
        Open.setText(data);}
        Scan1.close();
    }//GEN-LAST:event_Open0ActionPerformed

    private void CipherSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CipherSaveActionPerformed
        
    // CipherSaveActionPerformed Purpose: To replace orignal txt file text with new ciphered txt and save it
        
    int Shift1 = Integer.parseInt(ShiftInput.getText()); 
    String File = FileLocation.getText(); 
    String CipherOut = CipherOutput.getText();
    
    try{
      String Old = File10(File);
      String New = Cipher(File, Shift1);
         modifySave(File, Old, New);
    }catch(Exception e) { 
        throw new RuntimeException(e);}
    }//GEN-LAST:event_CipherSaveActionPerformed

    private void DecipherSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecipherSaveActionPerformed
        
    // DecipherSaveActionPerformed Purpose: To replace orignal txt file text with new deciphered txt and save it
        
    int Shift1 = Integer.parseInt(ShiftInput.getText()); 
    String File = FileLocation.getText(); 
    String CipherOut = CipherOutput.getText();
    try{
      String Old = File10(File);
      String New = Decipher(File, Shift1);
         modifySave(File, Old, New);
    }catch(Exception e) { 
        throw new RuntimeException(e);}
        
    }//GEN-LAST:event_DecipherSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CipherWaleedUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CipherWaleedUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CipherWaleedUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CipherWaleedUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CipherWaleedUI().setVisible(true);
           
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cipher;
    private javax.swing.JTextArea CipherOutput;
    private javax.swing.JButton CipherSave;
    private javax.swing.JButton Clear;
    private javax.swing.JButton Decipher;
    private javax.swing.JTextArea DecipherOutput;
    private javax.swing.JButton DecipherSave;
    private javax.swing.JButton Exit;
    private javax.swing.JTextField FileLocation;
    private javax.swing.JTextArea Input;
    private javax.swing.JTextArea Open;
    private javax.swing.JButton Open0;
    private javax.swing.JLabel Shift;
    private javax.swing.JTextField ShiftInput;
    private javax.swing.JLabel Title;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
